#![warn(clippy::pedantic)]
#![warn(clippy::nursery)]
#![warn(clippy::unwrap_used)]
#![warn(clippy::expect_used)]

/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
 */

/*
 * Two bits of relevant math here.
 *
 * First, triangle numbers are n*(n+1)/2 for n>=1.
 *
 * Second, we can use the tau function to compute the number divisors of a an integer
 * (https://mathschallenge.net/library/number/number_of_divisors). We just need
 * to compute its prime factorization and then multiply the increment of all the
 * exponents. I.e., if the factorization is a^x * b^y * c^z then the number of
 * factors is (x+1)*(y+1)*(z+1).
 *
 * In theory we could factor the two numbers (n and n+1) separately and then merge
 * their factorizations. In fact, since n and n+1 can share _no_ prime factors, we
 * can compute the tau function separately for the two pieces, and then multiply
 * them together to get the overall tau value, i.e.,
 *
 *    tau(a*b) = tau(a) * tau(b) if a and b are relatively prime (which n and n+1 are)
 *
 * I don't think the answer will be very large, so I'll just brute force searching
 * up for a number that gives us over 500 divisors.
 */

// use std::sync::{atomic::{AtomicUsize, Ordering}, Mutex};

use anyhow::{anyhow, Context, Result};

fn main() -> Result<()> {
    println!("Problem 12: {}", problem_12(500)?);

    Ok(())
}

fn problem_12(required_num_factors: usize) -> Result<usize> {
    // This is intentionally an open-ended iteration, and we're assuming that we'll
    // eventually find a solution and terminate.
    #[allow(clippy::maybe_infinite_iter)]
    let n = (1usize..)
        // I don't know a clean way to avoid this `unwrap()` since it's inside
        // the closure. There's a `try_find` in nightly that would do what I want,
        // but I don't really want to go to nightly (I don't think). I _might_ be
        // able to do something with `find_map` here, but I'm too tired to figure
        // that out right now.
        .find(|n| num_divisors_for_n(*n).unwrap() > required_num_factors)
        .context("We never got a value")?;

    Ok(n * (n + 1) / 2)
}

// static biggest_so_far: Mutex<usize> = Mutex::new(1);

fn num_divisors_for_n(mut n: usize) -> Result<usize> {
    let mut n_plus_1 = n + 1;
    if n % 2 == 0 {
        n /= 2;
    } else {
        n_plus_1 /= 2;
    }
    let nd_n = num_divisors(n)?;
    let nd_n_plus_1 = num_divisors(n_plus_1)?;
    let result = nd_n * nd_n_plus_1;
    // let mut biggest = biggest_so_far.lock().unwrap();
    // if result > *biggest {
    //     println!("{} has {result} divisors", n*(n+1)/2);
    //     *biggest = result;
    // }
    Ok(result)
}

fn num_divisors(n: usize) -> Result<usize> {
    let sieve = primal::Sieve::new(n);
    let factors = sieve
        .factor(n)
        .map_err(|_| anyhow!("Failed to factor {n}"))?;
    let result: usize = factors.into_iter().map(|(_, x)| x + 1).product();
    Ok(result)
}
